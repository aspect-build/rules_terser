"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//terser/private:versions.bzl", "TOOL_VERSIONS")

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
def rules_terser_dependencies():
    # The minimal version of bazel_skylib we require
    maybe(
        http_archive,
        name = "bazel_skylib",
        sha256 = "c6966ec828da198c5d9adbaa94c05e3a1c7f21bd012a0b29ba8ddbccb2c93b0d",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
        ],
    )
    maybe(
        http_archive,
        name = "aspect_rules_js",
        sha256 = "fae5e9ee00dc52d29a1eafea3e6d8293ac38da219cc86691cd4e10ade4b3b264",
        strip_prefix = "rules_js-2736ed7c95a418f9976c365ae13731b0522574bd",
        url = "https://github.com/aspect-build/rules_js/archive/2736ed7c95a418f9976c365ae13731b0522574bd.tar.gz",
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for terser toolchain"
_ATTRS = {
    "terser_version": attr.string(),
}

def _terser_repo_impl(repository_ctx):
    repository_ctx.symlink(Label("//terser/private:run_terser.js"), "run_terser.js")

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", """\
# Generated by aspect_rules_terser/terser/repositories.bzl
load("@aspect_rules_js//js:js_binary.bzl", "js_binary")
load("@aspect_rules_terser//terser/private:{version}/node_modules.bzl", "node_modules")

node_modules()

js_binary(
    name = "{name}",
    data = ["//:npm__terser"],
    entry_point = "run_terser.js",
    visibility = ["//visibility:public"],
)
""".format(
        name = repository_ctx.attr.name,
        version = repository_ctx.attr.terser_version,
    ))

terser_repositories = repository_rule(
    _terser_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def terser_register_toolchains(name, terser_version, **kwargs):
    """Convenience macro for users which does typical setup.

    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "terser"
        terser_version: a version which is mirrored into rules_terser
        **kwargs: passed to each node_repositories call
    """
    if terser_version not in TOOL_VERSIONS.keys():
        fail("""\
terser version {} is not currently mirrored into rules_terser.
Please instead choose one of these available versions: {}
Or, make a PR to the repo running /scripts/mirror_release.sh to add the newest version.
If you need custom versions, please file an issue.""".format(terser_version, TOOL_VERSIONS.keys()))

    npm_repositories = TOOL_VERSIONS[terser_version]
    npm_repositories()

    terser_repositories(
        name = name,
        terser_version = terser_version,
    )
