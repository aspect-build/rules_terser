"@generated by @aspect_rules_js//npm/private:npm_translate_lock.bzl from //:pnpm-lock.yaml"

# buildifier: disable=bzl-visibility
load("@aspect_rules_js//js:defs.bzl", _js_library = "js_library")
load("@npm_aspect_rules_terser__acorn__8.8.0__links//:defs.bzl", store_0 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__buffer-from__1.1.2__links//:defs.bzl", store_1 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__commander__2.20.3__links//:defs.bzl", store_2 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__lodash.sortby__4.7.0__links//:defs.bzl", store_3 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__punycode__2.1.1__links//:defs.bzl", store_4 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__source-map-support__0.5.21__links//:defs.bzl", store_5 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__source-map__0.6.1__links//:defs.bzl", store_6 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__source-map__0.8.0-beta.0__links//:defs.bzl", store_7 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__terser__5.13.0__links//:defs.bzl", link_8 = "npm_link_imported_package_store", store_8 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__tr46__1.0.1__links//:defs.bzl", store_9 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__webidl-conversions__4.0.2__links//:defs.bzl", store_10 = "npm_imported_package_store")
load("@npm_aspect_rules_terser__whatwg-url__7.1.0__links//:defs.bzl", store_11 = "npm_imported_package_store")

def npm_link_all_packages(name = "node_modules", imported_links = []):
    """Generated list of npm_link_package() target generators and first-party linked packages corresponding to the packages in //:pnpm-lock.yaml

    Args:
        name: name of catch all target to generate for all packages linked
        imported_links: optional list link functions from manually imported packages
            that were fetched with npm_import rules,

            For example,

            ```
            load("@npm//:defs.bzl", "npm_link_all_packages")
            load("@npm_meaning-of-life__links//:defs.bzl", npm_link_meaning_of_life = "npm_link_imported_package")

            npm_link_all_packages(
                name = "node_modules",
                imported_links = [
                    npm_link_meaning_of_life,
                ],
            )```
    """

    root_package = ""
    link_packages = [""]
    is_root = native.package_name() == root_package
    link = native.package_name() in link_packages
    if not is_root and not link:
        msg = "The npm_link_all_packages() macro loaded from @npm_aspect_rules_terser//:defs.bzl and called in bazel package '%s' may only be called in the bazel package(s) corresponding to the root package '' and packages ['']" % native.package_name()
        fail(msg)
    link_targets = []
    scope_targets = {}

    for link_fn in imported_links:
        new_link_targets, new_scope_targets = link_fn(name)
        link_targets.extend(new_link_targets)
        for _scope, _targets in new_scope_targets.items():
            scope_targets[_scope] = scope_targets[_scope] + _targets if _scope in scope_targets else _targets

    if is_root:
        store_0(name = "{}/acorn".format(name))
        store_1(name = "{}/buffer-from".format(name))
        store_2(name = "{}/commander".format(name))
        store_3(name = "{}/lodash.sortby".format(name))
        store_4(name = "{}/punycode".format(name))
        store_5(name = "{}/source-map-support".format(name))
        store_6(name = "{}/source-map".format(name))
        store_7(name = "{}/source-map".format(name))
        store_8(name = "{}/terser".format(name))
        store_9(name = "{}/tr46".format(name))
        store_10(name = "{}/webidl-conversions".format(name))
        store_11(name = "{}/whatwg-url".format(name))
    if link:
        if native.package_name() == "":
            link_targets.append(link_8(name = "{}/terser".format(name)))

    for scope, scoped_targets in scope_targets.items():
        _js_library(
            name = "{}/{}".format(name, scope),
            srcs = scoped_targets,
            tags = ["manual"],
            visibility = ["//visibility:public"],
        )

    _js_library(
        name = name,
        srcs = link_targets,
        tags = ["manual"],
        visibility = ["//visibility:public"],
    )
