"@generated by @aspect_rules_js//npm/private:translate_pnpm_lock.bzl from pnpm lock file @//:pnpm-lock.yaml"

# buildifier: disable=bzl-visibility
load("@aspect_rules_js//npm/private:linked_npm_packages.bzl", "linked_npm_packages")
load("@npm__acorn__8.7.1__links//:defs.bzl", link_0 = "link_npm_package")
load("@npm__buffer-from__1.1.2__links//:defs.bzl", link_1 = "link_npm_package")
load("@npm__commander__2.20.3__links//:defs.bzl", link_2 = "link_npm_package")
load("@npm__lodash.sortby__4.7.0__links//:defs.bzl", link_3 = "link_npm_package")
load("@npm__punycode__2.1.1__links//:defs.bzl", link_4 = "link_npm_package")
load("@npm__source-map-support__0.5.21__links//:defs.bzl", link_5 = "link_npm_package")
load("@npm__source-map__0.6.1__links//:defs.bzl", link_6 = "link_npm_package")
load("@npm__source-map__0.8.0-beta.0__links//:defs.bzl", link_7 = "link_npm_package")
load("@npm__terser__5.13.0__links//:defs.bzl", link_8 = "link_npm_package")
load("@npm__tr46__1.0.1__links//:defs.bzl", link_9 = "link_npm_package")
load("@npm__webidl-conversions__4.0.2__links//:defs.bzl", link_10 = "link_npm_package")
load("@npm__whatwg-url__7.1.0__links//:defs.bzl", link_11 = "link_npm_package")

def link_all_npm_packages(name = "node_modules"):
    """Generated list of link_npm_package() target generators and first-party linked packages corresponding to the packages in @//:pnpm-lock.yaml

    Args:
        name: name of catch all target to generate for all packages linked
    """
    root_package = ""
    link_packages = [""]
    is_root = native.package_name() == root_package
    is_direct = native.package_name() in link_packages
    if not is_root and not is_direct:
        msg = "The link_all_npm_packages() macro loaded from @npm//:defs.bzl and called in bazel package '%s' may only be called in the bazel package(s) corresponding to the root package '' and packages ['']" % native.package_name()
        fail(msg)
    direct_targets = []
    scoped_direct_targets = {}

    direct_targets.append(link_0(name = "{}/acorn".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_1(name = "{}/buffer-from".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_2(name = "{}/commander".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_3(name = "{}/lodash.sortby".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_4(name = "{}/punycode".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_5(name = "{}/source-map-support".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_6(name = "{}/source-map".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_7(name = "{}/source-map".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_8(name = "{}/terser".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_9(name = "{}/tr46".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_10(name = "{}/webidl-conversions".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_11(name = "{}/whatwg-url".format(name), direct = None, fail_if_no_link = False))

    for scope, scoped_targets in scoped_direct_targets.items():
        linked_npm_packages(
            name = "{}/{}".format(name, scope),
            srcs = [t for t in scoped_targets if t],
            tags = ["manual"],
            visibility = ["//visibility:public"],
        )

    linked_npm_packages(
        name = name,
        srcs = [t for t in direct_targets if t],
        tags = ["manual"],
        visibility = ["//visibility:public"],
    )
